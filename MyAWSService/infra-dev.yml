AWSTemplateFormatVersion: '2010-09-09'
Description: >
  - EC2 (t4g.micro)
  - RDS MySql (Min 0.5 ACU, Auto Pause 5min)
  - AWS Budgets による上限アラート

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16

Resources:
  # EC2AMRole
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  DBMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: aurora-master-credentials
      Description: Master credentials (username & password) for Aurora
      GenerateSecretString:
        SecretStringTemplate: '{"username":"Admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: "\"@/\\' "
      Tags:
        - Key: Name
          Value: AuroraMasterSecret

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: LowCostVpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      
  PublicSubnetB: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]  

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable


  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and MySQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 125.51.109.221/32

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t4g.nano              # 1 vCPU / 0.25 GiB RAM
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64}}'
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 8        # GiB – minSize
      Tags:
        - Key: Name
          Value: LowCostInstance
          
# ----------------------------- ③ SSM Maintenance Window -----------------------------
  PatchMaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      Name: Weekly-OS-Patch
      Schedule: "cron(0 16 ? * MON *)"  
      Duration: 2                     
      Cutoff: 1                         
      AllowUnassociatedTargets: false
      Tags:
        - Key: Name
          Value: WeeklyPatchMW

  PatchMaintenanceTarget:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties:
      WindowId: !Ref PatchMaintenanceWindow
      ResourceType: INSTANCE
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref EC2Instance
      OwnerInformation: "Weekly patch target"

  PatchMaintenanceTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      WindowId: !Ref PatchMaintenanceWindow
      TaskArn: AWS-RunPatchBaseline                 
      TaskType: RUN_COMMAND
      Priority: 1
      MaxConcurrency: "1"
      MaxErrors: "1"
      Targets:
        - Key: WindowTargetIds
          Values:
            - !Ref PatchMaintenanceTarget
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Parameters:
            Operation:
              - Install
            RebootOption:
              - RebootIfNeeded
  
  # ----------------------------- ③ SSM Maintenance Window 〆-----------------------------
  
  # ---------- RDS MySQL (db.t4g.micro) ----------
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS subnet group
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PublicSubnetB
  
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: app-mysql
      Engine: mysql
      EngineVersion: "8.4.6"
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: 20
      StorageType: gp3
      BackupRetentionPeriod: 7
      MasterUsername: !Sub "{{resolve:secretsmanager:${DBMasterSecret}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DBMasterSecret}:SecretString:password}}"
      VPCSecurityGroups:
        - !Ref EC2SecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: true
      DeletionProtection: false
      MultiAZ : false
      Tags:
        - Key: Name
          Value: LowCostInstance
  
  Budget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: LowCostMonthBudget
        BudgetLimit:
          Amount: 7.33
          Unit: USD
        BudgetType: COST
        TimeUnit: MONTHLY
        CostFilters: {}
      NotificationsWithSubscribers:
        - Notification:
            ComparisonOperator: GREATER_THAN
            NotificationType: ACTUAL
            Threshold: 90       
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: EMAIL
              Address: ryoku@blueremarks.com   
      
  # ------------------ SchedulerIAMRole start ------------------
  SchedulerControlRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ControlEC2RDS
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${EC2Instance}
              - Effect: Allow
                Action:
                  - rds:StartDBInstance
                  - rds:StopDBInstance
                Resource: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${RDSInstance}
            # ------------------ SSchedulerIAMRole end ------------------

  # ------------------ EventBridge Scheduler ------------------
  EC2StartSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: "cron(0 0 ? * SAT,SUN *)"  # 09:00 JST = 00:00 UTC
      Target:
        Arn: arn:aws:scheduler:::aws-sdk:ec2:startInstances
        RoleArn: !GetAtt SchedulerControlRole.Arn
        Input: !Sub |
          {
            "InstanceIds": ["${EC2Instance}"]
          }

  EC2StopSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: "cron(0 10 ? * SAT,SUN *)" # 19:00 JST = 10:00 UTC
      Target:
        Arn: arn:aws:scheduler:::aws-sdk:ec2:stopInstances
        RoleArn: !GetAtt SchedulerControlRole.Arn
        Input: !Sub |
          {
            "InstanceIds": ["${EC2Instance}"]
          }

  RDSStartSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: "cron(0 0 ? * SAT,SUN *)"  # 09:00 JST
      Target:
        Arn: arn:aws:scheduler:::aws-sdk:rds:startDBInstance
        RoleArn: !GetAtt SchedulerControlRole.Arn
        Input: !Sub |
          {
            "DbInstanceIdentifier": "app-mysql"
          }

  RDSStopSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: "cron(0 10 ? * SAT,SUN *)" # 19:00 JST
      Target:
        Arn: arn:aws:scheduler:::aws-sdk:rds:stopDBInstance
        RoleArn: !GetAtt SchedulerControlRole.Arn
        Input: !Sub |
          {
            "DbInstanceIdentifier": "app-mysql"
          }
  # ------------------ EventBridge Scheduler 〆 ------------------


Outputs:
  EC2PublicIP:
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: EC2PublicIP
  RDSEndpoint:
    Value: !GetAtt RDSInstance.Endpoint.Address
